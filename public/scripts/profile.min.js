import app from"/js/site.min.js";const d=app.d,df=d.domfn,{header:header,section:section,span:span,p:p,textarea:textarea,input:input,button:button,b:b,div:div,article:article}=df,{txt:txt}=d,profileLauncher=d.query(".profile-launcher"),profileView=app.profileView=section({class:"profile-view"},(e=>[e.profileHeader=header(span.username(b(e.usernameView=txt(app.user.username)),"'s profile"),span.divider("|"),span.handle("handle: @",e.handleView=txt(app.user.handle))),e.logoutBtn=button.logout_btn("Log out")])),{logoutBtn:logoutBtn,profileHeader:profileHeader,usernameView:usernameView,handleView:handleView}=profileView;app.profileViewToggle=app.setupToggleSituation(profileLauncher,profileView,"body",{background:!0}),d.once.click(logoutBtn,(async e=>{const a=await(await fetch("/auth",{method:"DELETE"})).json();df.remove(logoutBtn),profileView.append(div(a.status)),setTimeout((()=>window.location.reload()),1e3)}));let udonce=!1;app.userDescription=async e=>{if(null==e&&(e=e=>Promise.resolve(e)),null!=app.user.description)return e(app.user.description);if(udonce)return app.once.userDescription(e),Promise.resolve(app.user.description);{udonce=!0;const a=await(await fetch("/user/"+app.user.id+"/description")).json();if(a.ok)return app.emit.userDescription(app.user.description=a.data),e(app.user.description)}return Promise.reject(503)},app.userDescription();const descriptionTabs=app.tabView({$:profileHeader,attacher:"after",tabs:[{name:"description",view:div.description((e=>{app.userDescription((a=>{p({$:e},a)}))}))},{name:"change",view:div.change_description((e=>[e.editor=textarea({attr:{max:300,min:3}},(e=>{app.userDescription((a=>{e.value=a}))})),button({async onclick(){let a=e.editor.value.trim();if(a.length>299||a.length<4)return void app.toast.error("Description is too short");if(app.user.description===a)return void app.toast.error("User description was not altered");const t=await(await app.jsonPost("/user/change/description",a)).json();t.ok?(app.user.description=a,descriptionTabs.active="description",descriptionTabs.views.description.view.innerHTML="",descriptionTabs.views.description.view.append(p(app.user.description)),app.toast.normal(t.status)):app.toast.error(t.status)}},"change")]))}]}),handleTabs=app.tabView({$:profileHeader,attacher:"after",tabs:[{name:"handle",view:div({class:"handle"},span(app.user.handle))},{name:"change",view:div({class:"change-handle"},(e=>[e.editor=input({value:app.user.handle,attr:{type:"text",max:300,min:3}}),button({async onclick(){let a=e.editor.value.trim();if(a.length>30||a.length<3)return void app.toast.error("User handle is either too short or too long");if(app.user.handle===a)return void app.toast.error("User handle was not altered");const t=await(await app.jsonPost("/user/change/handle",a)).json();t.ok?(app.user.handle=a,handleTabs.active="handle",handleTabs.views.handle.view.innerHTML="",handleTabs.views.handle.view.append(p(app.user.handle)),handleView.textContent=app.user.handle,app.toast.normal(t.status)):app.toast.error(t.status)}},"change")]))}]}),usernameTabs=app.tabView({$:profileHeader,attacher:"after",tabs:[{name:"username",view:div.username(span(app.user.username))},{name:"change",view:div.change_username((e=>[e.editor=input({value:app.user.username,attr:{type:"text",max:50,min:3}}),button({async onclick(){let a=e.editor.value.trim();if(a.length>30||a.length<3)return void app.toast.error("User handle is too short");if(app.user.username===a)return void app.toast.error("Username was not altered");const t=await(await app.jsonPost("/user/change/username",a)).json();t.ok?(app.user.username=a,usernameTabs.active="username",usernameTabs.views.username.view.innerHTML="",usernameTabs.views.username.view.append(p(app.user.username)),usernameView.textContent=app.user.username,app.toast.normal(t.status)):app.toast.error(t.status)}},"change")]))}]});
//# sourceMappingURL=profile.min.js.map