import app from"/js/site.min.js";const d=app.d,df=d.domfn,{div:div,span:span,section:section,input:input,textarea:textarea}=df,{query:query,on:on,once:once}=d,wwLauncher=query(".ww-launcher"),{wwView:wwView,titleInput:titleInput,writingPad:writingPad,tagInput:tagInput,pushWritBtn:pushWritBtn,saveLocallyBtn:saveLocallyBtn,clearEditorBtn:clearEditorBtn,writSelector:writSelector,isPublicCheckbox:isPublicCheckbox,isCommentableCheckbox:isCommentableCheckbox,writList:writList}=d.h`
<article class="writ-writer-view" ref="wwView">
    <section class="writer">
        <div>
            <input type="text" name="post-title" title="writ title" id="title-input" placeholder="writ title" autocomplete="off" ref="titleInput">
        </div>
        <div class="writing-pad-container">
            <textarea class="writing-pad" ref="writingPad" title="writ content" spellcheck="true" minlength="10" required placeholder="content of your writ (it can be markdown)"></textarea>
        </div>
        <div class="tags-and-toggles">
            <input type="text" name="tags" title="tag input" id="tag-input" placeholder="comma, separated, tags" autocomplete="off" ref="tagInput">
            <div>
                <label for="is-public">public</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="public" id="is-public" ref="isPublicCheckbox" checked>
                    <span></span>
                </div>
            </div>
            <div>
                <label for="is-commentable">commentable</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="commentable" id="is-commentable" ref="isCommentableCheckbox" checked>
                    <span></span>
                </div>
            </div>
        </div>
        <section class="ribbon">
            <button class="submit" ref="pushWritBtn">Push</button>
            <button class="submit" ref="saveLocallyBtn">Save locally</button>
            <button class="submit" ref="clearEditorBtn">Clear Editor</button>
        </section>
    </section>
    <aside class="writ-selector" ref="writSelector">
        <header>Your Writs</header>
        <section class="writ-list" ref="writList"></section>
    </aside>
</article>`.collect();app.writListPaginationView=section.pagination(app.writListPageBackBtn=div.page_back({contingentVisibility:"wlpageNot0",onclick(t){app.populateWritList({back:!0})}},"<<"),app.writListPageNumView=div.page_num(),app.writListPageForwardBtn=div.page_forward({onclick(t){app.populateWritList({next:!0})}},">>")),writList.after(app.writListPaginationView),writingPad.value="",app.titleInput=titleInput,app.writingPad=writingPad,app.tagInput=tagInput,app.doob=async(t=10)=>{for(;t-- >1;)app.clearEditor(),app.titleInput.value=`Doob # ${x}`,app.writingPad.value=`Doob # ${x}`,app.tagInput.value="test",await app.editorPushWrit()},(app.wwTS=app.setupToggleSituation(wwLauncher,wwView,"body",{viewOutAnimation:"fade-out 220ms ease-out",delayRemoveMS:220,background:!0})).toggleView();const writListEntry=(t,e,a=!1)=>div({class:{"wl-entry":!0,unpushed:null==e},$:a?void 0:writList,attr:{wid:null==e?t:e}},(i=>(a&&writList.prepend(i),[i.titleSpan=span(t),div((()=>{const a=span({class:"delete-writ",attr:{title:"Double click/tap to delete writ"}},"ðŸ—‘");let p,r=0;const n=on.pointerup(a,(async s=>{if(clearTimeout(p),2!=++r)return 1==r&&a.classList.add("prep"),void(p=setTimeout((()=>{a.classList.remove("prep"),r=0}),900));r=0;try{if(n.off(),null!=e){(await app.deleteWritRequest(e)).ok&&(df.remove(i),app.ww.active&&app.ww.active.id==e&&app.clearEditor(),delete app.ww.writs[e],app.emit("postEdit:"+e,!1))}else await localforage.removeItem("unpushed:"+t),delete app.ww.unpushed[t],df.remove(i),app.ww.active&&app.ww.active.title==t&&app.clearEditor()}catch(s){n.on(),console.error(`Well, that didn't work: ${s}`)}}));return a}))])));app.ww={writs:{},unpushed:{}},app.pushWrit=async(t,e,a,i={})=>{if(1===a.length&&""===a[0])throw new Error("posts need at least one tag");const p={title:t,raw_content:e.trim(),tags:a,kind:"post",public:!0,viewable_by:[],...i},r=await app.jsonPut("/writ",p),n=await r.json();if(n.ok){if(null!=p.id){const t=writList.querySelector(`[wid="${p.id}"]`);t&&app.editableWritQuery({author_name:app.user.username,with_raw_content:!1,ids:[p.id]}).then((async e=>{if(!d.isArr(e))return app.toast.error("Failed to fetch your editable writs"),console.error("failed to fetch user's editable writs");for(const a of e)a.raw_content=p.raw_content,app.ww.writs[a.id]=a,t.titleSpan.textContent=a.title,app.emit("postEdit:"+a.id,a)}))}else p.id=n.data.id,p.posted=n.data.posted,p.slug=n.data.slug,app.emit.newPost(p.id),app.ww.writs[p.id]=p,writListEntry(p.title,p.id),app.clearEditor();return Promise.resolve(n.data)}return Promise.reject(n)},app.deleteWritRequest=t=>app.txtDelete("/writ",t),app.wwQuery={author_name:app.user.username,with_raw_content:!1,page:0},app.populateWritList=({page:t=app.wwQuery.page,next:e,back:a}={})=>{if(!0===a){if(0==app.wwQuery.page)return;app.wwQuery.page--}else!0===e?app.wwQuery.page++:t!=app.wwQuery.page&&(app.wwQuery.page=t);app.editableWritQuery(app.wwQuery).then((async t=>{if(!d.isArr(t))return app.toast.error("Failed to fetch your editable writs"),console.error("failed to fetch user's editable writs");app.cv("wlpageNot0",0!=app.wwQuery.page),app.writListPageNumView.textContent=app.wwQuery.page,writList.innerHTML="";for(const e of t)app.ww.writs[e.id]=e,writListEntry(e.title,e.id);if(0==app.wwQuery.page)for(const t of await(await app.localForage()).keys())if(t.includes("unpushed:")){const e=JSON.parse(await localforage.getItem(t));app.ww.unpushed[e.title]=e,writListEntry(e.title)}}))},app.populateWritList(),app.rawContentRequest=async t=>{const e=await fetch("/writ-raw-content/"+t);return await e.json()},app.localForage=()=>app.localForageLoaded?Promise.resolve(window.localforage):new Promise((t=>app.once.localForageLoaded((()=>t(window.localforage))))),d.run((async()=>{await app.loadScriptsThenRunSequentially(!0,"/js/localforage.min.js"),app.emit("localForageLoaded",app.localForageLoaded=!0)})),on.pointerup(writList,(t=>{if(t.target.classList.contains("selected")||t.target.parentElement.classList.contains("selected"))return;let e=t.target.getAttribute("wid")||t.target.parentElement.getAttribute("wid");if(null!=e){const t=app.ww.active=app.ww.writs[e]||app.ww.unpushed[e];null==app.ww.writs[e]?pushWritBtn.after(saveLocallyBtn):df.remove(saveLocallyBtn),app.ww.selectedWLE&&app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=d.query(`[wid="${e}"]`),app.ww.selectedWLE.classList.add("selected");let a=null==t.raw_content;null==t.raw_content&&app.rawContentRequest(t.id).then((e=>{e.ok||(writingPad.value="Ok, so loading failed for some reason, you should reload or something, it's probably a client side error, or less likely, a database issue - "+(e.status||"")),writingPad.value=t.raw_content=e.data,a=!1})),titleInput.value=t.title,writingPad.value=t.raw_content||"Hang tight, the content is loading...",setTimeout((()=>{if(a){let e=0;const i="Hang tight, the content is loading";let p=setInterval((()=>{if(a){let t="";d.each(e++,(()=>t+=".")),writingPad.value=i+t,4==e&&(e=0)}else clearInterval(p),e=0,writingPad.value=t.raw_content}),220)}}),220),tagInput.value=t.tags.join(", "),isPublicCheckbox.checked=t.public,isCommentableCheckbox.checked=t.commentable,pushWritBtn.textContent="Update"}})),app.clearEditor=()=>{app.ww.active&&(app.ww.active=null),titleInput.value=writingPad.value=tagInput.value="",isPublicCheckbox.checked=isCommentableCheckbox.checked=!0,app.ww.selectedWLE&&(app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=null,pushWritBtn.textContent="Push"),pushWritBtn.after(saveLocallyBtn)},app.gatherWritFromWriter=()=>{const t=titleInput.value.trim(),e=writingPad.value.trim(),a=isPublicCheckbox.checked,i=isCommentableCheckbox.checked;return{title:t,raw_content:e,tags:tagInput.value.split(",").map((t=>t.trim())),ops:{is_md:!0,public:a,commentable:i}}},app.editorPushWrit=async()=>{let t;console.log("trying to push writ...");const e=app.gatherWritFromWriter();return app.ww.active&&(e.ops.id=app.ww.active.id),t=await app.pushWrit(e.title,e.raw_content,e.tags,e.ops),t&&null!=t.title&&app.toast.msg(`success, writ posted: ${t.title}`),t},on.pointerup(saveLocallyBtn,(async t=>{if(app.ww.active&&null!=app.ww.active.id)return;const{title:e,raw_content:a,tags:i,ops:p}=app.gatherWritFromWriter(),r={title:e,raw_content:a,tags:i,...p};await localforage.setItem("unpushed:"+e,JSON.stringify(r)),app.ww.active=app.ww.unpushed[e]=r,app.ww.selectedWLE&&app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=writListEntry(e),app.ww.selectedWLE.classList.add("selected")})),on.pointerup(clearEditorBtn,app.clearEditor),on.pointerup(pushWritBtn,(t=>{app.editorPushWrit()})),on.input(tagInput,app.filterTagInput),on.keydown(tagInput,(t=>{"Enter"===t.key?(app.editorPushWrit(),t.preventDefault(),titleInput.focus()):t.ctrlKey&&setTimeout((()=>{tagInput.value=app.cleanseTagValue(tagInput.value)}),0)})),on.input(titleInput,(t=>{"Enter"===t.key?(writingPad.focus(),t.preventDefault()):app.ww.active&&app.ww.selectedWLE&&(app.ww.selectedWLE.titleSpan.textContent=titleInput.value)}));
//# sourceMappingURL=writ-writer.min.js.map