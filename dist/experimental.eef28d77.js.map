{"mappings":"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","sources":["src/experimental.js"],"sourcesContent":["export default async function(app) {\r\n    if (location.hash == \"#experimental\") {\r\n        console.log('experiments...')\r\n        const {div, article, textarea, input, a, p, button, br, hr, h1, h4, section, span, header} = app.d\r\n\r\n        let mbstr = new Text()\r\n\r\n        let mb = div.mouseboard({\r\n            $: 'body',\r\n            css: {\r\n                opacity: '0',\r\n                pointerEvents: 'none'\r\n            }\r\n        }, \r\n            section.letters(\r\n                span.a('a'),\r\n                span.b('b'),\r\n                span.c('c'),\r\n                span.d('d'),\r\n                span.e('e'),\r\n                span.f('f'),\r\n                span.g('g'),\r\n                span.h('h'),\r\n                span.i('i'),\r\n                span.j('j'),\r\n                span.k('k'),\r\n                span.l('l'),\r\n                span.m('m'),\r\n                span.n('n'),\r\n                span.o('o'),\r\n                span.p('p'),\r\n                span.q('q'),\r\n                span.r('r'),\r\n                span.s('s'),\r\n                span.t('t'),\r\n                span.u('u'),\r\n                span.v('v'),\r\n                span.w('w'),\r\n                span.x('x'),\r\n                span.y('y'),\r\n                span.z('z'),\r\n                span.enter('enter'),\r\n                span.space('space'),\r\n                span.backspace('del'),\r\n                // span.capslock('caps')\r\n            ),\r\n            section.output(mbstr)\r\n        )\r\n\r\n        let is_busy = false\r\n\r\n        const setMBPos = (x, y) => {\r\n            mb.style.left = x + 'px'\r\n            mb.style.top = y + 'px'\r\n        }\r\n\r\n        document.onpointerdown = function(e) {\r\n            if (e.which == 2) {\r\n                is_busy = true\r\n                setMBPos(e.clientX - 50, e.clientY - 50)\r\n                e.preventDefault()\r\n                mb.style.opacity = '1'\r\n                mb.style.pointerEvents = 'all'\r\n            } else if (!e.target.parentNode.classList.contains('letters') && e.target != mb) {\r\n                mb.style.opacity = '0'\r\n                mb.style.pointerEvents = 'none'\r\n            }\r\n        }\r\n\r\n        document.onpointerup = function(e) {\r\n            if (e.target.parentNode.classList.contains('letters')) {\r\n                if (e.target.textContent == 'del') {\r\n                    mbstr.textContent = mbstr.textContent.slice(0, -1)\r\n                } else if (e.target.textContent == 'space') {\r\n                    mbstr.textContent += ' '\r\n                } else if (e.target.textContent == 'enter') {\r\n                    mbstr.textContent += '\\n'\r\n                } else {\r\n                    mbstr.textContent += e.target.textContent\r\n                }\r\n                is_busy = false\r\n            }\r\n        }\r\n\r\n\r\n        app.toast('...experiments loaded')\r\n    }\r\n\r\n\r\n    function curried_summing_function(...numbers_to_sum) {\r\n        let sum = 0\r\n        numbers_to_sum.forEach(n => sum += n)\r\n\r\n        return (...numbers_to_sum) => {\r\n            if (!numbers_to_sum.length) return sum\r\n\r\n            numbers_to_sum.forEach(n => sum += n)\r\n            return (...ns) => curried_summing_function(sum, ...ns)\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nGIven the following code example in javascript, write a similar curried function that produces valid varied english sentences randomly, incorporating a wide vocabulary, making sure that it should never produce the same sentence twice and that each one is grammar checked, as paramaters take in emotion words and common verbs and adjectives as fodder for the selection process that determines what kind of sentence comes out  ```javascript  function curried_summing_function(...numbers_to_sum) {\r\n        let sum = 0\r\n        numbers_to_sum.forEach(n => sum += n)\r\n\r\n        return (...numbers_to_sum) => {\r\n            if (!numbers_to_sum.length) return sum\r\n\r\n            numbers_to_sum.forEach(n => sum += n)\r\n            return (...ns) => curried_summing_function(sum, ...ns)\r\n        }\r\n    } ```\r\n\r\n*/\r\n\r\nfunction brainfuckEval(code) {\r\n    const memory = new Uint8Array(30000)\r\n    let pointer = 0\r\n    let output = ''\r\n    let input = ''\r\n    let inputPointer = 0\r\n    let loopStack = []\r\n\r\n    for (let i = 0; i < code.length; i++) {\r\n        switch (code[i]) {\r\n            case '>':\r\n                pointer++\r\n                break\r\n            case '<':\r\n                pointer--\r\n                break\r\n            case '+':\r\n                memory[pointer]++\r\n                break\r\n            case '-':\r\n                memory[pointer]--\r\n                break\r\n            case '.':\r\n                output += String.fromCharCode(memory[pointer])\r\n                break\r\n            case ',':\r\n                memory[pointer] = input.charCodeAt(inputPointer++)\r\n                break\r\n            case '[':\r\n                loopStack.push(i)\r\n                break\r\n            case ']':\r\n                if (memory[pointer]) {\r\n                    i = loopStack[loopStack.length - 1]\r\n                } else {\r\n                    loopStack.pop()\r\n                }\r\n                break\r\n            case 'g':\r\n                if (code[i + 1] == 'o') {\r\n                    if (code[i + 2] == 't') {\r\n                        if (code[i + 3] == 'o') {\r\n                            if (code[i + 4] == ' ') {\r\n                                let label = ''\r\n                                for (let j = i + 5; j < code.length; j++) {\r\n                                    if (code[j] == ' ') {\r\n                                        break\r\n                                    } else {\r\n                                        label += code[j]\r\n                                    }\r\n                                }\r\n                                i = labels[label]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n            case 'l':\r\n                if (code[i + 1] == 'a') {\r\n                    if (code[i + 2] == 'b') {\r\n                        if (code[i + 3] == 'e') {\r\n                            if (code[i + 4] == 'l') {\r\n                                if (code[i + 5] == ' ') {\r\n                                    let label = ''\r\n                                    for (let j = i + 6; j < code.length; j++) {\r\n                                        if (code[j] == ' ') {\r\n                                            break\r\n                                        } else {\r\n                                            label += code[j]\r\n                                        }\r\n                                    }\r\n                                    labels[label] = i\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n            case '&':\r\n                if (code[i + 1] == 'r') {\r\n                    if (code[i + 2] == 'e') {\r\n                        if (code[i + 3] == 'f') {\r\n                            if (code[i + 4] == ' ') {\r\n                                let label = ''\r\n                                for (let j = i + 5; j < code.length; j++) {\r\n                                    if (code[j] == ' ') {\r\n                                        break\r\n                                    } else {\r\n                                        label += code[j]\r\n                                    }\r\n                                }\r\n                                memory[pointer] = memory[labels[label]]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n            case '*':\r\n                if (code[i + 1] == 'd') {\r\n                    if (code[i + 2] == 'e') {\r\n                        if (code[i + 3] == 'r') {\r\n                            if (code[i + 4] == 'e') {\r\n                                if (code[i + 5] == 'f') {\r\n                                    if (code[i + 6] == ' ') {\r\n                                        let label = ''\r\n                                        for (let j = i + 7; j < code.length; j++) {\r\n                                            if (code[j] == ' ') {\r\n                                                break\r\n                                            } else {\r\n                                                label += code[j]\r\n                                            }\r\n                                        }\r\n                                        memory[labels[label]] = memory[pointer]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n                \r\n        }\r\n    }\r\n\r\n    return output\r\n}\r\n\r\nconsole.log(brainfuckEval(`+++++>-----<++.`))"],"names":["async","$818440000ce94e18$export$2e2bcd8739ae039","app","location","hash","console","log","div","article","textarea","input","a","p","button","br","hr","h1","h4","section","span","header","d","mbstr","Text","mb","mouseboard","$","css","opacity","pointerEvents","letters","b","c","e","f","g","h","i","j","k","l","m","n","o","q","r","s","t","u","v","w","x","y","z","enter","space","backspace","output","is_busy","setMBPos","style","left","top","document","onpointerdown","which","clientX","clientY","preventDefault","target","parentNode","classList","contains","onpointerup","textContent","slice","toast","code","memory","Uint8Array","length","pointer","String","fromCharCode","charCodeAt","inputPointer","loopStack","pop","label","labels","label1","j1","label2","j2","label3","j3"],"version":3,"file":"experimental.eef28d77.js.map"}