import d from"/js/domlib.min.js";const Scroller=({container:e,offset:t=.25,scenes:n=[],init:r=!0})=>{let o,i=0;if("string"==typeof n&&(null==(n=d.queryAll(n,e))||0==n.length))throw new Error("no valid scenes to observe");(n=new Set([...n])).forEach(t=>{if("string"==typeof t){if(n.delete(t),null==(t=d.queryAll(t,e)))return;t.length&&t.forEach(e=>{n.add(e)})}});const s=d.emitter({init(){const r=[];o=new IntersectionObserver(t=>{const n=(()=>{const e=window.pageYOffset,t=e>i;return i=e,t})();t.forEach(t=>{const o=t.target,i={bounds:t.boundingClientRect,element:o,index:r.indexOf(o),isScrollingDown:n},l=o===e?"container":"scene";t.isIntersecting?s.emit(l+":enter",i):s.emit(l+":exit",i)})},{rootMargin:`${-100*(1-t)}% 0px ${-100*t}%`}),n.forEach(e=>{r.push(e),o.observe(e)}),e&&o.observe(e),s.emit("init")}});return r&&s.init(),s};export default Scroller;
//# sourceMappingURL=scroller.min.js.map