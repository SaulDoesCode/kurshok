import app from"/js/site.min.js";import route from"/js/router.min.js";const d=app.d,df=d.domfn,{div:div,input:input,button:button,article:article,a:a,p:p,hr:hr,h1:h1,h4:h4,section:section,span:span,header:header}=df,mainView=d.query("main[route-active]"),postListView=div.post_list(),contentDisplay=section.posts(postListView);app.postDisplay=section.full.post((t=>{t.parts=d.h`
        <header class="post-header">
            <div>
                <h3 class="post-title" ref="title"></h3>
                <div class="author-name" ref="author"></div>
                <div> ‚óè </div>
                <time class="posted" ref="date"></time>
                <div class="tags" ref="tags"></div>
            </div>
        </header>
        <article class="content" ref="content"></article>
    `.renderCollect(t)})),app.postQuery={page:0,amount:8,kind:"post",public:!0};const postFilterView=div.post_filter((t=>[section.tag_filter(header("Tag filter"),t.tagInput=input({attr:{type:"text",name:"tags",pattern:"[a-zA-Z0-9-, ]+"},onkeydown(e,a){if("Enter"==e.key&&a.value.length>1){let e=a.value.replace(" ","");e.includes(",")&&(e=e.split(",")),postFilterView.collectTags(e),a.value="",a.commas=0,a.lastInput=void 0,t.runQuery(!1)}},oninput(t,e){app.filterTagInput(t,e)}}),t.tagListContainer=div.tag_list_container({attr:{hidden:!0}},t.tagListDisplay=div.list(),button({onclick(){t.runQuery()}},"query"),t.clearBtn=button({attr:{hidden:!0},onclick(e,a){t.tags=[],delete app.postQuery.tags,app.postQuery.page=0,t.collectTags(),app.postFilter({}),a.setAttribute("hidden",!0)}},"clear")))]));postFilterView.runQuery=t=>{!1!==t&&postFilterView.collectTags(t),postFilterView.tags&&postFilterView.tags.length&&(app.filterQuery=!0,app.postFilter({tags:postFilterView.tags}),postFilterView.clearBtn.removeAttribute("hidden"))},postFilterView.collectTags=t=>{postFilterView.tags||(postFilterView.tags=[]),d.isArr(t)?t.forEach((t=>{"string"==typeof t&&t.length>1&&postFilterView.tags.push(t)})):"string"==typeof t&&t.length>1&&postFilterView.tags.push(t),postFilterView.tags=[...new Set(postFilterView.tags)].map((t=>t.trim())).filter((t=>t.length>1&&t.length<23&&-1!==t.search(app.tagRegex))),df.attrToggle(postFilterView.tagListContainer,"hidden",!postFilterView.tags.length);const e=[];return d.each(postFilterView.tagListDisplay.children,(t=>{postFilterView.tags.includes(t.title)?e.push(t.title):df.remove(t)})),postFilterView.tags.forEach((t=>{e.includes(t)||span.tag({$:postFilterView.tagListDisplay,title:t,onclick(e,a){postFilterView.tags=postFilterView.tags.filter((e=>e!=t)),df.remove(a),df.attrToggle(postFilterView.tagListContainer,"hidden",!postFilterView.tags.length),app.postQuery.page=0,0==postFilterView.tags.length?(delete app.postQuery.tags,app.postFilter({})):postFilterView.runQuery(!1)}},t)})),postFilterView.tags},route("posts",[contentDisplay,postFilterView]),""!=location.hash&&"#"!=location.hash||(location.hash="posts",route.handle()),route("post",app.postDisplay),route("no-content",div.no_content(h1("Sorry folks, no content. This website is barren."),button({onclick(){location.hash="posts",window.location="/"}},"Reload page, maybe it helps.")));const postNavView=d.html('\n    <nav class="post-nav">\n        <button class="post-back-btn" onclick="location.hash = app.fancyHash || \'posts\'">\n            <span class="icon-left-open"></span>\n            Back to Post List\n        </button>\n    </nav>\n'),quickScroll=d.html('\n<nav class="quick-scroll">\n    <div class="to-top icon-up-open" onclick="window.scrollTo({top: 0, left: 0, behavior: \'smooth\'})"></div>\n    <div class="to-comments icon-comment" onclick="document.querySelector(\'#comments\').scrollIntoView({behavior: \'smooth\'})"></div>\n    <div class="to-top icon-down-open" onclick="window.scrollTo({top: document.body.scrollHeight, left: 0, behavior: \'smooth\'})"></div>\n</nav>');route.on.post((async t=>{await app.afterPostsInitialization();let e=app.activePost=app.posts[t];if(null==e){const a=await app.writQuery({ids:[t]});if(!d.isArr(a)||0===a.length)return location.hash="no-content",void route.handle();e=app.activePost=app.posts[t]=a[0]}const{title:a,tags:p,author:o,date:s,content:i}=app.postDisplay.parts;a.textContent=e.title,s.innerHTML="",d.render(app.renderUXTimestamp(e.posted),s),p.innerHTML="",e.tags.map((t=>span.tag({$:p,attr:{title:t}},t))),o.textContent="By "+e.author_name,i.innerHTML="Content loading...",app.commentsDisplay&&df.remove(app.commentsDisplay),df.prepend(mainView,postNavView),app.activeVotesUI&&(app.activeVotesUI.remove(),app.activeVotesUI=null),o.before(app.activeVotesUI=app.votesUI("writ",e)());const n=await app.fetchPostContent(e.id);i.innerHTML="",e==app.activePost&&(d.render(d.html(n),i),setTimeout((()=>d.queryAll(".content code",i).forEach((t=>{t.classList.add("language-rust")}))),60),d.render(quickScroll)),app.emit.postRendered(e,t)})),route.on.change((()=>{location.hash.includes("post:")||df.remove(quickScroll)}));const publicPost=t=>div.post({$:postListView,attr:{pid:t.id},onclick(e,a){if(!e.target.className.includes("vote"))if(e.target.classList.contains("tag")){let t=e.target.getAttribute("title");null!=t&&(app.postQuery.page=0,postFilterView.runQuery(t))}else location.hash=t.id}},(e=>{const a=h4(t.title);return app.on("postEdit:"+t.id,(p=>{!1===p?(df.remove(e),app.postPages[t.page]=app.postPages[t.page].filter((e=>e!=t.id)),delete app.posts[t.id],location.hash.includes(t.id)&&(location.hash="posts")):(location.hash.includes("no-content")&&(location.hash="posts",route.handle()),a.textContent=app.posts[t.id].title=p.title,app.posts[t.id].commentable=p.commentable)})),[header(div.title(a),hr(),div(div.posted(app.renderUXTimestamp(t.posted)),div.author_name(`By ${t.author_name}`)),div.tags(t.tags.map((t=>span.tag({attr:{title:t}},t)))))]}));app.fetchPostContent=async t=>{if(app.posts[t]&&null!=app.posts[t].content)return app.posts[t].content;const e=await fetch("/post-content/"+t),a=await e.json();if(!a.ok)throw new Error(a.status);return app.posts[t].content=a.data},app.posts=Object.create(null),app.postPages=Object.create(null),app.postPaginationView=section.pagination(app.postPageBackBtn=div.page_back({contingentVisibility:"pageNot0",onclick(t){app.fetchPosts(app.activePostPage-1)}},"<<"),app.pageNumView=div.page_num(),app.postPageForwardBtn=div.page_forward({onclick(t){app.fetchPosts(app.activePostPage+1)}},">>")),app.fetchPosts=async(...t)=>{t.length&&d.isNum(t[0])&&(app.postQuery.page=t[0],d.isNum(t[1])&&(app.postQuery.amount=t[1]));try{app.postQuery.tags.length||delete app.postQuery.tags}catch(t){}let e;if("no-content"==route.hash()&&(app.failedToFetchPosts?(location.hash="posts",route.handle(),console.warn("not sure what happened")):(location.hash="posts",route.handle(),console.log("false alarm"))),d.isArr(app.postPages[app.postQuery.page])){postListView.innerHTML="";let t=0;for(const e of app.postPages[app.postQuery.page])if(publicPost(app.posts[e]),++t>=app.postQuery.amount)break}else{try{if(e=await app.writQuery({with_content:!1,...app.postQuery}),!d.isArr(e))throw 0!=app.postQuery.page||app.filterQuery||(mainView.innerHTML="",app.failedToFetchPosts=!0,location.hash="no-content",route.handle()),console.error(e),new Error(e.status);app.failedToFetchPosts=!1}catch(t){return app.postPageForwardBtn.style.color="red",app.postPageForwardBtn.textContent="404",setTimeout((()=>{app.postPageForwardBtn.style.color="",app.postPageForwardBtn.textContent=">>"}),3e3),void(location.hash.includes("post:")?0==app.postQuery.page?(app.failedToFetchPosts=!0,location.hash="no-content",route.handle()):(location.hash="posts",route.handle()):0!=app.postQuery.page||app.filterQuery||(mainView.innerHTML="",app.failedToFetchPosts=!0,location.hash="no-content",route.handle()))}app.postPages[app.postQuery.page]=[],postListView.innerHTML="",e.length>=5&&d.render(app.postPaginationView,contentDisplay),e.forEach((t=>{t.page=app.postQuery.page,app.postPages[app.postQuery.page].push(t.id),publicPost(app.posts[t.id]=t)}))}app.emit.activePostPage(app.activePostPage=app.postQuery.page),app.pageNumView.textContent=app.postQuery.page,app.cv("pageNot0",0!=app.postQuery.page),app.postsInitialized||(app.emit.postsInitialized(app.postsInitialized=!0),app.loadStyle("https://cdnjs.cloudflare.com/ajax/libs/prism/1.21.0/themes/prism-tomorrow.min.css",!0),await import("/js/comments.min.js"))},app.fetchPosts(),app.on.newPost((()=>{app.posts=Object.create(null),app.postPages=Object.create(null),postListView.innerHTML="",app.fetchPosts()})),app.postFilter=async t=>{if(t.tags&&(app.postQuery.tags=t.tags),app.posts=Object.create(null),app.postPages=Object.create(null),postListView.innerHTML="",await app.fetchPosts(),!Object.keys(app.posts).length){const t=df.h2("404 - No matching posts found :(");d.render(t,"section.posts","prepend"),d.once.click(postFilterView,(()=>{df.remove(t)}))}app.filterQuery=!1},app.afterPostsInitialization=t=>app.postsInitialized?null!=t?t():Promise.resolve(!0):null!=t?app.once.postsInitialized(t):new Promise(app.once.postsInitialized);
//# sourceMappingURL=view.min.js.map